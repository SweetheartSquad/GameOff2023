::start
<<if !this.started>>
<<do
	// add `this.gotod(passage, delay)`
	this.gotoo = this.goto;
	this.goto = (passage) => {
		window.clearTimeout(this.auto);
		this.auto = 0;
		return this.gotoo(passage);
	};
	this.gotod = (passage, delay) => {
		window.clearTimeout(this.auto);
		this.auto = window.setTimeout(() => {
			this.goto(passage);
		}, delay);
	};

	
	// start with music off in debug
	// camera
	this.cameraPlaceholder = this.Model('camera_test');
	this.cameraPlaceholder.visible = false;

	const cameraPlaceholder = this.cameraPlaceholder.model.getChildByName('Camera');
	this.scene.camera3d.position = cameraPlaceholder.position;
	const camProps = window.resource('camera_test').descriptor.cameras[0].perspective;
	this.scene.camera3d.fieldOfView = camProps.yfov / Math.PI * 180;
	this.scene.camera3d.near = camProps.znear;
	this.scene.camera3d.far = camProps.zfar;

	// road + sway
	this.roadSpeed = 2;
	const roadSize = 100;
	this.roadAngle = 20; // degrees

	const roadSegments = Math.max(3, Math.ceil(this.scene.camera3d.far*2 / roadSize));

	this.roadAngle = this.roadAngle / 180 * Math.PI;
	let rootRoad;
	const objs = this.Container3D();

	for(let i = 0; i < roadSegments; ++i) {
		const road = this.Model('groundPlane_3_20', 'palette', { depth: true });
		if (i === 0) {
			rootRoad = road;
		} else {
			rootRoad.model.addChild(road.model);
		}
		road.model.position.z = -i * roadSize * Math.cos(this.roadAngle);
		road.model.position.y = i * roadSize * Math.sin(this.roadAngle);

	
		const forest = this.Model('forest', 'palette', { depth: true });
		road.model.addChild(forest.model);
	}
	const xRoot = rootRoad.model.position.x;
	const yRoot = rootRoad.model.position.y;
	let curPos = 0;
	let roadDelta = 0;
	let rootY = this.scene.camera3d.position.y;
	this.stepping = 0;
	this.Updater(() => {
		objs.container.children.forEach(i => {
			if (i.loops >= 2) {
				this.destroy(i.gameObject);
			}
		});
	});
	this.Updater(() => {
		roadDelta = game.app.ticker.deltaMS / 1000 * this.roadSpeed * this.ease.cubicInOut(this.stepping);
		this.scene.camera3d.position.y = rootY + (1-this.ease.cubicInOut(Math.abs(0.5-this.ease.cubicInOut(this.stepping))*2))*0.01;
		curPos += roadDelta;
		let oldz = objs.container.position.z;
		let oldy = objs.container.position.y;
		let looped = 0;
		if (curPos > roadSize) {
			looped = 1;
			curPos -= roadSize;
		} else if (curPos < 0) {
			looped = -1;
			curPos += roadSize;
		}
		let pos = curPos + roadSize/2;
		objs.container.position.z = rootRoad.model.position.z =  pos * Math.cos(this.roadAngle);
		objs.container.position.y = rootRoad.model.position.y = -pos * Math.sin(this.roadAngle);

		if (looped) {
			objs.container.children.forEach(i => {
				i.loops = (i.loops || 0) + 1;
				i.position.z += oldz - objs.container.position.z;
				i.position.y += oldy - objs.container.position.y;
			});
		}
		// sway road back and forth
		// const sway = Math.sin(Date.now()/2300)*2 + Math.sin(Date.now()/3200)*4;
		// rootRoad.model.position.x = xRoot + sway * 0.1 * Math.min(1, this.roadSpeed/50);

		// bounce road
		// rootRoad.model.position.y = yRoot + Math.sin(cTime/20) * 0.01;
	});

	// passenger
	const poseBase = 'passenger';
	const initialPose = 'walk';
	this.passenger = this.Model('passenger', `${poseBase}_${initialPose}_n`, { transparent: true, doubleSided: true });
	this.passengerLegs = this.Model('passenger', 'passenger_legs', { transparent: true, doubleSided: true });
	// fix alpha
	this.passenger.model.children.forEach(i => i.visible = false);
	this.passengerPlane = this.passenger.model.getChildByName('passenger_plane');
	this.passengerLegsPlane = this.passengerLegs.model.getChildByName('passenger_plane');
	this.passengerPlane.visible = true;
	this.passengerPlane.position.x -= 0.0001;
	this.passenger.model.parent.setChildIndex(this.passenger.model, this.passenger.model.parent.children.length-1);
	this.passengerLegs.model.children.forEach(i => i.visible = false);
	this.passengerLegs.model.getChildByName('passenger_plane').visible = true;
	this.passengerLegs.model.parent.setChildIndex(this.passengerLegs.model, this.passengerLegs.model.parent.children.length-1);
	
	const passengerMouthFront = this.passenger.model.getChildByName('mouth_front');
	const passengerMouthBack = this.passenger.model.getChildByName('mouth_back');
	this.scene.pointDialogue.position = passengerMouthFront.position;

	this.EnvModel = (...args) => {
		const m = this.Model(...args);
		objs.container.addChild(m.model);
		m.model.position.x -= objs.container.position.x;
		m.model.position.y -= objs.container.position.y;
		m.model.position.z -= objs.container.position.z;
		return m;
	};
	this.Model('mountainShape1', 'palette');
	// setTimeout(() => {
	// 	this.EnvModel('coyoteXsign');
	// }, 1000 * 110);
	// setTimeout(() => {
	// 	this.EnvModel('coyote');
	// }, 1000 * 120);

	// random props
	// const props = [
	// 	'roadsideTrash1',
	// 	'roadsideTrash1',
	// 	'roadsideTrash1',
	// 	'roadsideTrash2',
	// 	'roadsideTrash2',
	// 	'roadsideTrash2',
	// 	'pothole1',
	// 	'pothole1',
	// 	'cactus1',
	// 	'cactus1',
	// 	'cactus2',
	// 	'cactus2',
	// 	'cactus3',
	// 	'cactus3',
	// 	'cactus4',
	// 	'cactus4',
	// 	'cactus5',
	// 	'cactus5',
	// 	'cactus6',
	// 	'cactus6',
	// 	'cactus7',
	// 	'cactus7',
	// 	'cactus8',
	// 	'cactus8',
	// 	'longhornskull',
	// ];
	// let lastprop;
	// const rndprop = () => {
	// 	if (!lastprop || lastprop.model.destroyed) {
	// 		const prop = this.shuffle(props)[0];
	// 		lastprop = this.EnvModel(prop);
	// 	}
	// 	setTimeout(rndprop, Math.random()*25000+Math.random()*25000+5000);
	// };
	// rndprop();
	// let lastprop2;
	// const rndprop2 = () => {
	// 	if (!lastprop2 || lastprop2.model.destroyed) {
	// 		const prop = this.shuffle(props)[0];
	// 		lastprop2 = this.EnvModel(prop);
	// 	}
	// 	setTimeout(rndprop2, Math.random()*25000+Math.random()*25000+5000);
	// };
	// rndprop2();

	// const boulders = [
	// 	'boulder1',
	// 	'boulder2',
	// 	'boulder3',
	// 	'boulder4',
	// 	'boulder5',
	// 	'boulder6',
	// 	'boulder7',
	// 	'boulder8',
	// 	'boulder9',
	// 	'boulder10',
	// 	'boulder11',
	// 	'boulder12',
	// ];
	// const rndprop3 = () => {
	// 	const prop = this.shuffle(boulders)[0];
	// 	const model = this.EnvModel(prop);
	// 	model.model.position.y -= 1.36;
	// 	setTimeout(rndprop3, Math.random()*3000+Math.random()*1000+100);
	// };
	// rndprop3();

	// pose helper
	const poses = {
		':(': 'sad',
		':)': 'normal',
		'o_o': 'facing_you',
		'-_-': 'facing_away',
	};

	const terr = this.tex('error');
	let prev = '';
	this.setPose = (pose, state) => {
		this.pose = poses[pose] || pose;
		const frame = this.passenger.animator.frame;
		const offset = this.passenger.animator.offset;
		let t = [poseBase, this.pose, state].filter(i => i).join('_');
		if (t === prev) return;
		prev = t;
		if (this.tex(t) === terr) t = [poseBase, this.pose].filter(i => i).join('_');
		if (this.tex(t) === terr) t = [poseBase, initialPose, state].filter(i => i).join('_');
		if (this.tex(t) === terr) t = [poseBase, state].filter(i => i).join('_');
		if (this.tex(t) === terr) t = poseBase;
		this.passenger.setAnimation(t);
		this.passenger.animator.frame = frame;
		this.passenger.animator.offset = offset;
		this.passenger.animator.updateTexture();
		if (pose.includes('stand')) {
			this.passengerLegs.setAnimation('blank');
			this.passengerLegs.animator.updateTexture();
		} else {
			this.passengerLegs.setAnimation('passenger_legs');
			this.passengerLegs.animator.updateTexture();
		}
	};


	// blinking and lip flaps
	this.pose = initialPose;
	this.blinking = false;
	this.timeoutBlinking;
	this.scene.dialogue.scripts.push({
		gameObject: this.scene.dialogue,
		update: () => {
			if (!this.pose) return;
			if (!this.timeoutBlinking) {
				this.timeoutBlinking = setTimeout(() => {
					this.blinking = !this.blinking;
					this.timeoutBlinking = null;
				}, this.blinking ? 100 : 2000+Math.random()*4000);
			};

			const letter = this.scene.dialogue.strText[scene.dialogue.pos];
			const isLetter = letter && letter.replace(/[^\w]/, '');
			if (isLetter) {
				this.setPose(this.pose, 'o');
			} else if (this.blinking) {
				this.setPose(this.pose, 'b');
			} else {
				this.setPose(this.pose, 'n');
			}
		},
	});
	this.setPose(this.pose, 'n');

	// footsteps
	this.scene.dialogue.scripts.push({
		gameObject: this.scene.dialogue,
		update: () => {
			if (this.passengerLegs.animator.frameChanged && (this.passengerLegs.animator.frame === 1 || this.passengerLegs.animator.frame === 4)) {
				this.tweenAbort(this.steppingTween);
				this.steppingTween = this.tween(this, 'stepping', 0, 1300, 1);
				this.sfx('stepDefault', {
					rate: Math.random()*0.25+0.75,
					volume: Math.random()*0.25+0.75,
				});
				const print = this.EnvModel('footprint', 'footprintWood', { transparent: true });
				// offset left/right
				print.model.position.x += 0.1 * Math.sign(this.passengerLegs.animator.frame - 2);
			}
		}, 
	});

	// walk direction
	let baseScale = this.passengerPlane.scale.x;
	this.scene.dialogue.scripts.push({
		gameObject: this.scene.dialogue,
		update: () => {
			this.passengerLegsPlane.scale.x = this.passengerPlane.scale.x = baseScale * Math.sign(this.roadSpeed);
			this.scene.pointDialogue.position = Math.sign(this.roadSpeed) > 0 ? passengerMouthFront.position : passengerMouthBack.position;
		},
	});
	

	// add syntax sugar for poses like `:( - Blah blah`
	const check = /^(.*) - /;
	this.scene.dialogue.sayo = this.scene.dialogue.say;
	this.scene.dialogue.say = (text, actions) => {
		const match = check.exec(text);
		if (match) {
			this.setPose(match[1]);
			return this.scene.dialogue.sayo(text.substring(match[0].length), actions);
		} else {
			return this.scene.dialogue.sayo(text, actions);
		}
	};

	// 	this.music('bgm');

	// start
	this.started=true;
	this.goto('close');
	requestAnimationFrame(async () => {
		this.scene.container3d.visible = true;
		this.scenarios = this.shuffle(Object.keys(this.passages).filter(i => i.startsWith('scenario-')));

		await this.delay(556*8);
		const t = scene.strand.Text('TAXI');
		game.app.stage.addChild(t.display.container);
		t.text.style.fontSize = 50;
		t.text.style.fill = 0x406885;
		t.text.x = 30;
		t.text.y = 30;

		await this.delay(556*2);
		t.text.text = 'TAXI QUEST';


		await this.delay(556*2);
		const t2 = scene.strand.Text('66');
		game.app.stage.addChild(t2.display.container);
		t2.text.style.fontSize = 240;
		t2.text.style.fill = 0x406885;
		t2.text.x = 30;
		t2.text.y = 10;

		await this.delay(556*6);
		t.destroy();
		t2.destroy();
		this.goto('main');
	});
>>
<<endif>>

::close
this should never render

::debug menu
debug menu

[[passage select>passage select]]
[[close]]
[[get interaction region|console.log(this.scene.x, this.scene.y)]]
[[back|this.back()]]

::main
test
>
walk - walk
>
stand - stand
>
walk - walk
>
<<do this.roadSpeed *= -1>>
walk - walk backwards
>
<<do this.roadSpeed *= -1>>
walk - walk forwards
>

<<do this.goto('close');this.gotod(this.scenarios.pop() || 'end-scenario', this.debug ? 2000 : (Math.random()*10+12)*1000);>>

::end-scenario
<<do this.EnvModel('exitSign')>>
:) - Oh, is that a sign up ahead?
>
<<do
	this.scene.interactive = false;
	this.scrim(1, 4000);
>>
I think this is my exit.
>
<<do
	this.goto('close');
	this.gotod('end-scenario2', 5000);
>>

::end-scenario2
This is it, huh?
>
<<do this.sfx('door_open')>>
...
>
So, uh.
>
How much do I owe you?
[[ |((async () => {
		if (this.ended) return;
		this.ended = true;

		await this.delay(3000);
		this.sfx('door_close');
		this.goto('close');

		await this.delay(3000);
		const e = this.EnvModel('exitSign');
		e.model.rotationQuaternion.setEulerAngles(0, 180, 0);
		e.model.position.x -= 7;
		this.chimneys.model.rotationQuaternion.setEulerAngles(0, 180, 0);
		this.scene.interactive = true;
		this.scrim(0, 3000);
		this.passenger.model.visible = false;
		this.passengerProps.model.visible = false;
		this.aloneProps.model.visible = true;

		await this.delay(6000);
		const t = this.Text('The End');
		t.text.anchor.x = 1.0;
		t.text.anchor.y = 1.0;
		t.display.container.x = game.app.renderer.width - 30;
		t.display.container.y = game.app.renderer.height - 20;
		this.sfx('door_open', { rate: 2.0 });
		window.game.app.stage.addChild(t.display.container);
	})());
]]









::honk-limit
o_o - Is that REALLY necessary?
>Yeah|Nah
:) - We haven't passed another car in hours!
>
And it's the middle of the night.
>
I should be asleep right now!
>
-_- - ...Hmph.
[[>main]]



//  ██████  ██████ ███████ ███    ██  █████  ██████  ██  ██████   ██████
// ██      ██      ██      ████   ██ ██   ██ ██   ██ ██ ██    ██ ██     
// ███████ ██      █████   ██ ██  ██ ███████ ██████  ██ ██    ██ ███████
//      ██ ██      ██      ██  ██ ██ ██   ██ ██   ██ ██ ██    ██      ██
// ██████   ██████ ███████ ██   ████ ██   ██ ██   ██ ██  ██████  ██████ 

::scenario-busy
:) - Been a busy night?
>Yeah|Nah
Lot of folks I know've been trying to leave the city.
>
My mom's been nagging me for the past year.
>
-_- - Going on about how dangerous it's gotten.
>
Thought she was just being annoying but it's gotten outta hand lately...
>
...
>
o_o - I uh, saw your rifle in the back...
>
Is that for hunting out here?
[[Yeah>busy-yes]]
[[Nah>busy-no]]

::busy-no
Oh...
>
Have you ever had to use it on the job?
[[Yeah>busy-no-yes]]
[[Nah>busy-no-no]]
[[...>busy-no-ignore]]
[[Once>busy-no-yes]]

::busy-no-no
...Hm.
>
:( - Well, probably for the best.
[[>main]]

::busy-no-ignore
...
>
:( - Yeah, probably better you don't answer that.
[[>main]]

::busy-no-yes
Oh.
>
:( - Well, I won't ask.
[[>main]]

::busy-yes
Cool! I've never been hunting before.
>
:) - So do you like, catch desert hares or something?
[[Yeah>hares]]
[[Nah>no-hares]]
[[...>Bigger game]]
[[Bigger game]]

::hares
Ah. Wonder if I'll have to start hunting back at home, ha ha.
>
Apparently they're having a hard time finding truckers to make the journey out. Supply chain's out of wack or something.
>
Never seen the stores so empty...
>
-_- - Wonder how long all this will last for.
[[>main]]

::no-hares
No? I thought they were common out here...
>
-_- - Though... come to think of it, I guess I haven't seen any.
>
Wonder where they all went...
[[>main]]

::Bigger game
Deer, then?
>
-_- - I hear there are some deer in this desert.
>
Never seen one, though.
>
...
>
I don't think I could shoot a deer.
>
:) - Probably not a hare either, heh.
>
:( - In fact, I think continuing to live my life in a way that does not involve me shooting things would be best.
>
Just in general.
[[>main]]

::scenario-two-seater
:) - So... a two seater huh?
>
Haven't seen many taxis like that, ha ha.
>
Some more supply issues? Not enough yellow cabs to go 'round?
[[Yeah>two-seater-yeah]]
[[Nah>two-seater-nah]]

::two-seater-nah
Oh, just dealer's choice then?
>
It is kinda cozy.
[[>two-seater-yeah]]

::two-seater-yeah
o_o - Must be a pain if you get flagged down by a family of four.
>
Guess you could stick the kids in the trunk, ha ha.
[[Yeah>two-seater-yeah-yeah]]
[[Nah>two-seater-yeah-nah]]
[[...>two-seater-yeah-nah]]
[[Not many families around]]

::two-seater-yeah-yeah
:) - Heh.
>
...
>
o_o - You are joking, right?
[[>main]]

::two-seater-yeah-nah
:) - Heh.
>
...
[[>main]]

::Not many families around
Oh...
>
:( - Guess that makes things simpler then.
[[>main]]


::scenario-out-of-town
More people from the city have been going out of town lately...
>
:) - Must be nice, lot less hectic out here.
>
...
>
Does it feel weird?
>
o_o - I mean, when all day, you're just watching people leave?
[[Yeah>town-yeah]]
[[Nah>town-nah]]
[[...>town-yeah]]

::town-nah
Hmm.
>
:) - S'pose it's less strange if you're always coming and going yourself.
[[>town-yeah]]

::town-yeah
I appreciate the late night trip by the way.
>
-_- - Had to leave in a bit of a hurry.
[[>main]]

::scenario-love
o_o - You ever been in love?
>
:( - I mean- Sorry, that's a weird question, isn't it?
[[Yeah>awkward]]
[[Nah>okay]]

::awkward
Gahhh sorry, I'm really sorry.
>
I just... It's a long trip, you know? It's a lot of waiting.
>
I don't like waiting. Especially away from home.
>
:) - But you gotta have ice-breakers. Conversation starters.
>
-_- - I met a guy once, and that was the first thing he asked me.
>
"You ever been in love?"
>
Just came out with it like that.
>
:) - He asked it like he knew the answer.
>
o_o - Like he could look right past me and see it floating above my head.
>
It was... really scary, to be honest. But also kind of cool?
>
...
>
:( - Sorry, I'll drop it.
[[>main]]

::okay
You sure? You can say if it's not, I know I kind of sprang that out of nowhere... It's really okay?
[[Yeah>okay2]]
[[Nah>awkward]]

::okay2
Okay. Yeah? Okay!
>
:) - Cool.
>
So...
>
Have you?
>
o_o - Ever been in love, that is?
[[Yeah>love]]
[[Nah>no-love]]

::love
Huh.
>
...
>
Would you recommend it?
>Yeah|Nah
Okay.
>
:) - I'll keep that in mind.
[[>main]]

::no-love
Oh.
>
:( - That's a shame.
>
I mean- I wouldn't know. But still...
>
Kinda feels like we've missed the bus on it sometimes.
>
:) - ...Heh.
>
You know, when I miss a bus, I usually call a cab.
>
:( - ...
>
Sorry, I'll drop it.
[[>main]]

::scenario-speed
-_- - We're going pretty fast, huh?
>
:) - Guess they don't care much about speed limits out here.
>Yeah|Nah
Hard to imagine a cop pulling someone over for a traffic ticket these days.
>
-_- - Silver linings, heh.
[[>main]]


::scenario-there-yet
:) - You know, I was just thinking...
>
It's a good thing we're not making this trip with like, a kid, or something.
>
o_o - Can you imagine? Just "are we there yet" "are we there yet" the whole way there, non-stop.
>
Nightmare.
>
:) - Can't stand kids, honestly.
>
I know it's not their fault but it's just like... Grow up!
>
Ugh.
>
o_o - ...You don't have kids, do you?
[[I do>kids]]
[[I don't>no-kids]]
[[...>oof-kids]]
[[I did>oof-kids]]

::kids
Oh. Well, you know, no offense.
>
:) - I'm sure yours are nice.
>
You seem like- well, you know. I'm sure they're nice.
>
-_- - Still, glad they're not here right now, ha ha.
>
...
>
:) - Again, no offense. You know, it's just- you know.
>
:( - Kids. Ugh.
[[>main]]

::no-kids
Yeah, that's what I thought.
>
:) - You don't seem like the "having kids" type.
>
Takes one to know one, ha ha.
>
Who needs 'em.
>
-_- - "Are we there yet" "are we there yet" "are we there yet".
>
"No, now stow it you little brat!!"
>
:) - That's what I'd say.
>
Ughhh.
[[>main]]

::oof-kids
...Sorry.
>
:( - I, uh... I'll shut up now.
[[>main]]

::scenario-flood
-_- - Huh, is that a flood warning?
>
Do you get floods out here often?
[[Yeah>flood-yes]]
[[Nah>flood-no]]

::flood-yes
Weird. Floods in a desert?
>
:) - Isn't the whole deal that it's dry out here?
>
Guess I don't really know how floods work though...
>
o_o - Never know when a flood's gonna get you!
>
:) - Or, well- they put a sign up, so I suppose that's how you know.
>
Heh.
[[>main]]

::flood-no
Can't always trust what you read, I guess.
>
:( - Makes sense though, don't even remember when it last rained.
>
Just about triggered a riot last time they raised the water tax.
>
...
>
-_- - Least that's not my problem anymore.
[[>main]]


::scenario-met
o_o - Say...
>
Have... have we met before?
[[Yeah>met]]
[[Nah>no-met]]

::met
Wait, don't tell me!
>
I can guess:
[[>met-main]]

::no-met
Hmm, no, I'm sure we have...
[[>met-main]]

::met-main
<<do
	this.guesses = this.guesses || this.shuffle([
		'couch',
		'stash',
		'cookout',
		'pastlife',
		'cousin',
		'froyo',
		'killer',
		'met-stall',
		'met-stall',
	]);
	const guess = this.guesses.pop();
	this.goto(`met-main-${guess || 'done'}`);
>>

::met-main-couch
You used to do haul jobs, in a big van, helped my mom offload that awful green couch of hers?
[[Yeah>met-couch]]
[[Nah>met-main]]

::met-couch
God that thing reeked.
>
:) - Comfy as hell though, RIP to a real one.
[[>main]]

::met-main-stash
Did you sit in front of me during last month's stash game?
[[Yeah>met-stash]]
[[Nah>met-main]]

::met-stash
Of course!
>
:) - Can't believe I didn't realize it earlier.
>
You must've had a great view of the foul in the second half.
>
:( - Kinda glad I didn't. RIP to a real one.
[[>main]]

::met-main-cookout
Were you at Dave's cookout thing?
[[Yeah>met-cookout]]
[[Nah>met-main]]

::met-cookout
I knew it!
>
:) - What a party...
>
-_- - Wonder what Dave would think of me now.
>
:( - Probably would say I'm slinking away like a coward.
>
I probably wouldn't even disagree.
>
Still, RIP to a real one.
[[>main]]

::met-main-pastlife
We... met in a past life?
[[Yeah>met-pastlife]]
[[Nah>met-main]]

::met-pastlife
:) - C'mon, I was kidding.
>
-_- - I don't go in for all that reincarnation jazz.
>
Real ones gotta RIP, right?
[[>main]]

::met-main-cousin
Did you try to date my cousin?
[[Yeah>met-cousin]]
[[Nah>met-main]]

::met-cousin
Riiiiiiiight.
>
:) - You know, that explains a lot.
>
:( - You heard already, yeah?
>
Yeah, you must have.
>
RIP to a real one.
[[>main]]

::met-main-froyo
You broke the froyo machine on Bakers' Street?
[[Yeah>met-froyo]]
[[Nah>met-main]]

::met-froyo
Wow, it really is you.
>
:) - Never managed to get that thing working again...
>
RIP to a real one.
[[>main]]

::met-main-killer
Wait... You aren't with that killer, are you?!
[[Yeah>met-killer]]
[[Nah>met-main]]

::met-killer
Oh god.
>
:) - Oh GOD.
>
-_- - This can't be happening.
>
:) - But- wait.
>
o_o - If that's true, why would you tell me?
>
:( - You're just messing with me.
>
You think that's funny?
>
:) - Well I wasn't even really scared.
>
I'm too much of a real one to RIP it in the middle of nowhere with a joker for a driver.
[[>main]]

::met-main-met-stall
<<print this.shuffle([
	'Hm... I can get this...',
	'Is it- no, that can\'t be it.',
	'Hold on, hold on, I\'ll get it...',
	'No, that\'s not it...',
])[0]>>
[[>met-main]]

::met-main-done
...Okay, but we've definitely met.
>
Absolutely, one hundred percent certain.
>
:) - I've got an eye for these things, you know?
>
Never forget a face.
>
o_o - ...
>
This is gonna bug me all night...
[[>main]]


::scenario-hit-something
:) - Woah! Did you feel that?
>Yeah|Nah
That was a big bump!
>
-_- - What even was that?
>
Did... did we hit something?
[[Yeah>hit]]
[[Nah>hit-no]]

::hit-no
Are you sure?
>
:) - Maybe we should pull over just in case.
>
o_o - We could go check.
[[Yeah>hit-stop]]
[[Nah>hit-ignore]]
[[...>hit-ignore]]
[[No point>hit-reject]]

::hit
What was that?
>
:) - I barely got a look... Hope it wasn't a coyote or something.
>
o_o - Maybe we should pull over. We could go check on it.
[[Yeah>hit-stop]]
[[Nah>hit-ignore]]
[[...>hit-ignore]]
[[No point>hit-reject]]

::hit-ignore
...
>
:) - We're just... going to ignore it?
>
-_- - ...
>
It was probably nothing, but... I don't know.
>
:( - Bad omen.
[[>main]]

::hit-reject
...
>
:( - I guess.
>
...
>
-_- - Maybe we should-
>
No, nevermind. You're right.
[[>main]]


::hit-stop
<<do
	this.oldSpeed = this.roadSpeed;
	this.tween(this, 'roadSpeed', 0, 4000);
	this.goto('close');
	this.gotod('hit-stop2', 5000);
	this.setPose(':)', 'n');
>>

::hit-stop2
Okay.
>
Back in a sec.
>
<<do
	this.car.model.getChildByName('taxiDoor').rotationQuaternion.setEulerAngles(0,50,0);
	this.sfx('door_open');
	this.passenger.model.visible = false;
	this.goto('close');
	this.gotod('hit-stop3', 10000);
>>

::hit-stop3
<<do
	this.car.model.getChildByName('taxiDoor').rotationQuaternion.setEulerAngles(0,0,0);
	this.sfx('door_close');
	this.passenger.model.visible = true;
	this.goto('close');
	this.gotod('hit-stop4', 1000);
>>

::hit-stop4
:) - It's, uh...
>
:( - It's really dark out there.
>
...
>
I'm sure it's fine. We should go.
>
Thanks for stopping, though.
<<do
	setTimeout(() => {
		this.tween(this, 'roadSpeed', this.oldSpeed, 4000);
	}, 1500);
>>
[[>main]]
